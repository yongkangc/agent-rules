#!/usr/bin/env bash

# Memory Management Command for Claude Code
# Provides interface for storing and retrieving user context and preferences

MEMORY_BASE="$HOME/.claude/memory"
PROJECT_NAME=$(basename "$(pwd)")

# Ensure memory directories exist
mkdir -p "$MEMORY_BASE"/{user,projects,sessions,patterns}
mkdir -p "$MEMORY_BASE/projects/$PROJECT_NAME"

# Command functions
store_preference() {
    local category="$1"
    local value="$2"
    local pref_file="$MEMORY_BASE/user/preferences.json"
    
    # Initialize file if doesn't exist
    [ ! -f "$pref_file" ] && echo '{}' > "$pref_file"
    
    # Update preference using jq (or simple append if jq not available)
    if command -v jq &> /dev/null; then
        jq --arg cat "$category" --arg val "$value" '.[$cat] = $val' "$pref_file" > "$pref_file.tmp" && mv "$pref_file.tmp" "$pref_file"
    else
        echo "Stored: $category = $value" >> "$MEMORY_BASE/user/preferences.txt"
    fi
    
    echo "✓ Preference stored: $category"
}

store_project_context() {
    local aspect="$1"
    local details="$2"
    local context_file="$MEMORY_BASE/projects/$PROJECT_NAME/$aspect.md"
    
    echo "# $aspect" > "$context_file"
    echo "Updated: $(date)" >> "$context_file"
    echo "" >> "$context_file"
    echo "$details" >> "$context_file"
    
    echo "✓ Project context stored: $aspect for $PROJECT_NAME"
}

store_pattern() {
    local problem="$1"
    local solution="$2"
    local pattern_file="$MEMORY_BASE/patterns/solutions.json"
    
    [ ! -f "$pattern_file" ] && echo '[]' > "$pattern_file"
    
    # Add pattern entry
    local entry="{\"problem\": \"$problem\", \"solution\": \"$solution\", \"date\": \"$(date)\", \"project\": \"$PROJECT_NAME\"}"
    
    if command -v jq &> /dev/null; then
        jq --argjson entry "$entry" '. += [$entry]' "$pattern_file" > "$pattern_file.tmp" && mv "$pattern_file.tmp" "$pattern_file"
    else
        echo "$entry" >> "$MEMORY_BASE/patterns/solutions.txt"
    fi
    
    echo "✓ Pattern stored: $problem"
}

recall_preferences() {
    local category="$1"
    local pref_file="$MEMORY_BASE/user/preferences.json"
    local pref_text="$MEMORY_BASE/user/preferences.txt"
    
    echo "## User Preferences"
    
    if [ -f "$pref_file" ]; then
        if [ -n "$category" ] && command -v jq &> /dev/null; then
            jq -r --arg cat "$category" '.[$cat] // "Not found"' "$pref_file"
        elif command -v jq &> /dev/null; then
            jq . "$pref_file"
        else
            cat "$pref_file" 2>/dev/null || cat "$pref_text" 2>/dev/null || echo "No preferences stored"
        fi
    else
        echo "No preferences stored yet"
    fi
}

recall_project() {
    local aspect="$1"
    
    echo "## Project Context: $PROJECT_NAME"
    
    if [ -n "$aspect" ]; then
        local file="$MEMORY_BASE/projects/$PROJECT_NAME/$aspect.md"
        if [ -f "$file" ]; then
            cat "$file"
        else
            echo "No context stored for: $aspect"
        fi
    else
        # Show all project context
        local project_dir="$MEMORY_BASE/projects/$PROJECT_NAME"
        if [ -d "$project_dir" ]; then
            for file in "$project_dir"/*.md; do
                [ -f "$file" ] && {
                    echo "### $(basename "$file" .md)"
                    cat "$file"
                    echo ""
                }
            done
        else
            echo "No project context stored"
        fi
    fi
}

recall_patterns() {
    local problem_type="$1"
    local pattern_file="$MEMORY_BASE/patterns/solutions.json"
    local pattern_text="$MEMORY_BASE/patterns/solutions.txt"
    
    echo "## Solution Patterns"
    
    if [ -f "$pattern_file" ] && command -v jq &> /dev/null; then
        if [ -n "$problem_type" ]; then
            jq --arg type "$problem_type" '[.[] | select(.problem | contains($type))]' "$pattern_file"
        else
            jq . "$pattern_file"
        fi
    elif [ -f "$pattern_text" ]; then
        if [ -n "$problem_type" ]; then
            grep -i "$problem_type" "$pattern_text"
        else
            cat "$pattern_text"
        fi
    else
        echo "No patterns stored yet"
    fi
}

update_memory() {
    local category="$1"
    local key="$2"
    local value="$3"
    
    case "$category" in
        preference)
            store_preference "$key" "$value"
            ;;
        project)
            store_project_context "$key" "$value"
            ;;
        pattern)
            store_pattern "$key" "$value"
            ;;
        *)
            echo "Unknown category: $category"
            echo "Valid categories: preference, project, pattern"
            ;;
    esac
}

list_memories() {
    echo "## Memory Overview"
    echo ""
    echo "### User Preferences"
    [ -f "$MEMORY_BASE/user/preferences.json" ] && echo "  ✓ Preferences stored" || echo "  - No preferences"
    
    echo ""
    echo "### Project Contexts"
    for proj_dir in "$MEMORY_BASE/projects"/*; do
        [ -d "$proj_dir" ] && {
            local proj=$(basename "$proj_dir")
            local count=$(find "$proj_dir" -name "*.md" 2>/dev/null | wc -l)
            echo "  - $proj: $count contexts"
        }
    done
    
    echo ""
    echo "### Patterns"
    if [ -f "$MEMORY_BASE/patterns/solutions.json" ] && command -v jq &> /dev/null; then
        local count=$(jq 'length' "$MEMORY_BASE/patterns/solutions.json")
        echo "  - $count solution patterns"
    else
        echo "  - Pattern storage available"
    fi
}

clear_memory() {
    local scope="$1"
    
    case "$scope" in
        all)
            read -p "Clear ALL memory? This cannot be undone. (y/N): " confirm
            [ "$confirm" = "y" ] && {
                rm -rf "$MEMORY_BASE"
                mkdir -p "$MEMORY_BASE"/{user,projects,sessions,patterns}
                echo "✓ All memory cleared"
            }
            ;;
        project)
            rm -rf "$MEMORY_BASE/projects/$PROJECT_NAME"
            echo "✓ Project memory cleared for: $PROJECT_NAME"
            ;;
        preferences)
            rm -f "$MEMORY_BASE/user/preferences.json" "$MEMORY_BASE/user/preferences.txt"
            echo "✓ User preferences cleared"
            ;;
        patterns)
            rm -f "$MEMORY_BASE/patterns/solutions.json" "$MEMORY_BASE/patterns/solutions.txt"
            echo "✓ Solution patterns cleared"
            ;;
        *)
            echo "Valid scopes: all, project, preferences, patterns"
            ;;
    esac
}

# Main command routing
case "$1" in
    store)
        case "$2" in
            preference)
                store_preference "$3" "$4"
                ;;
            project)
                store_project_context "$3" "$4"
                ;;
            pattern)
                store_pattern "$3" "$4"
                ;;
            *)
                echo "Usage: memory store [preference|project|pattern] <key> <value>"
                ;;
        esac
        ;;
    recall)
        case "$2" in
            preferences)
                recall_preferences "$3"
                ;;
            project)
                recall_project "$3"
                ;;
            patterns)
                recall_patterns "$3"
                ;;
            *)
                echo "Usage: memory recall [preferences|project|patterns] [filter]"
                ;;
        esac
        ;;
    update)
        update_memory "$2" "$3" "$4"
        ;;
    list)
        list_memories
        ;;
    clear)
        clear_memory "$2"
        ;;
    *)
        echo "Memory Management System"
        echo ""
        echo "Usage:"
        echo "  memory store preference <category> <value>  - Store user preference"
        echo "  memory store project <aspect> <details>     - Store project context"
        echo "  memory store pattern <problem> <solution>   - Store solution pattern"
        echo "  memory recall preferences [category]        - Recall preferences"
        echo "  memory recall project [aspect]              - Recall project context"
        echo "  memory recall patterns [type]               - Recall solution patterns"
        echo "  memory update <category> <key> <value>      - Update existing memory"
        echo "  memory list                                 - List all stored memories"
        echo "  memory clear [all|project|preferences|patterns] - Clear memories"
        echo ""
        echo "Memory stored in: $MEMORY_BASE"
        ;;
esac